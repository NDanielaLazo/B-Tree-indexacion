#ifndef BTREE_H_
#define BTREE_H_
#include "node.h"
#include <iostream>
#include <string>
#include <vector>
#include <queue>


template <class T>
class btree
{
    /*
    Cada nodo tiene como máximo m hijos.
    Cada nodo no hoja (excepto raíz) tiene al menos ceil (m/2) hijos.
    La raíz tiene al menos dos hijos si no es un nodo hoja.
    Un nodo no hoja con k hijos contiene claves k-1.
    Todas las hojas aparecen en el mismo nivel y llevan información.
    */
public:
    btree(unsigned int dgree):root(nullptr),degree(dgree){}
    unsigned int getDegree(){return degree;}
    void insert(std::pair<unsigned int,T> &pear);
    void split(node<T> *current);
    //obtenemos:
    int getNumLevels();
    //funciones:
    void inOrder();
    void breadthFirst();
    void breadthFirstLevel(int level);
    void breadthFirstLevels(); //solo para fines de prueba, horriblemente ineficiente
    void updateParents(node<T> *nd);
    std::pair<bool,T> search(unsigned int keyValue);
    void deleteKey(unsigned int keyVal);
    void readIn(std::string textfile);
    void writeFile(std::string textfile);
    std::vector<std::vector<int> > getArraysAtLevel(int level);
    ~btree();
private:
    //propiedades:
    node<T> *root;
    unsigned int degree;
    //funciones:
    std::pair<bool,T> search(node<T> *nd, unsigned int keyValue); //search recursivo
    void inOrder(node<T>* nd); //print recursivo
    void deleteKey(unsigned int keyVal, node<T>* nd);
    void writeFile(node<T> *nd,std::string textfile, bool overwrite); //write recursivo
    void uproot(node<T> *nd); //delete recursivo
};

#include "btree.cpp"

#endif
